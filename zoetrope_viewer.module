<?php

/**
 * @file
 * Zoetrope Ltd. 2014
 *
 * Adds a UUID field type and field formatters to display zoetrope
 * engage&trade; images in a drupal site
 *
 */

/**
 * This constant is the zoetrope CDN url, do not change here, there's a
 * settings page to override it.
 */
const ZOETROPE_VIEWER_CDN = '//d34tuy4jppw3dn.cloudfront.net';

/**
 * Implements hook_permission
 */
function zoetrope_viewer_permission(){
  return array(
    'administer zoetrope viewer' => array(
      'title' => t('Administer Zoetrope Viewer Settings'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_menu().
 */
function zoetrope_viewer_menu() {
  $menu['admin/config/media/zoetrope_viewer'] = array(
    'title' => t('Zoetrope Viewer Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zoetrope_viewer_settings_form'),
    'access arguments' => array('administer zoetrope viewer')
  );
  return $menu;
}

/**
 * Implements hook_form().
 */
function zoetrope_viewer_settings_form($form, &$form_state) {

  $form['custom_cdn'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use custom CDN'),
    '#description' => t('Normally your images will be hosted by Zoetrope,' .
      ' we will tell you if you need this.'),
    '#default_value' => FALSE,
  );

  $form['cdn_url'] = array(
    '#type' => 'textfield',
    '#title' => t('base URL'),
    '#description' => t('The CDN url with no http:// or https://'),
    '#default_value' => '',
    '#states' => array(
      'visible' => array(
        ':input[name="custom_cdn"]' => array('checked' => TRUE),
      ),
    ),
  );

  return $form;
}

/**
 * Validation for CDN urls
 */
function zoetrope_viewer_settings_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if($values['custom_cdn']) {
    if(!valid_url($values['cdn_url'])){
      form_set_error('cdn_url', t('The CDN url does not appear to be a valid url.'));
    }
  }
}

/**
 * Implements hook_form_submit().
 */
function zoetrope_viewer_setttings_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if($values['custom_cdn']) {
    $zoe_cdn = $values['cdn_url'];
  }
  else {
    // default zoetrope CDN
    $zoe_cdn = ZOETROPE_VIEWER_CDN;
  }
  variable_set('zoetrope_viewer:cdn', $zoe_cdn);
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function zoetrope_viewer_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'zoetrope_uuid_field' => array(
      'label' => t('Zoetrope ID'),
      'description' => t('Add a Zoetrope Engage&trade; image to an entity'),
      'default_widget' => 'zoetrope_uuid_field_text_widget',
      'default_formatter' => 'zoetrope_engage_image',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function zoetrope_viewer_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['zoetrope_uuid_field'])) {
      $uuid_valid = TRUE;
      // Test for valid UUID (mongo ObjectID style UUID).
      if (!preg_match("/^[0-9a-fA-F]{24}$/", $item['zoetrope_uuid_field'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'zoetrope_uuid_field_invalid',
          'message' => t('Zoetrope ID field must be a valid UUID.'),
        );
        $uuid_valid = FALSE;
      }
      // Make a request to check it is infact a working image.
      if ($uuid_valid) {
        $url = zoetrope_viewer_preview_image_url($item['zoetrope_uuid_field']);
        $result = drupal_http_request($url);
        if ($result->code !== '200') {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'zoetrope_uuid_field_invalid',
            'message' => t('The Zoetrope ID does not seem to point to an image.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 *
 * Only widget is a text input box.
 */
function zoetrope_viewer_field_widget_info() {
  return array(
    'zoetrope_uuid_field_text_widget' => array(
      'label' => t('Zoetrope Text Field'),
      'field types' => array('zoetrope_uuid_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * This implements our input box as defined in hook_field_widget_info().
 */
function zoetrope_viewer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = isset($items[$delta]['zoetrope_uuid_field']) ? $items[$delta]['zoetrope_uuid_field'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;
  switch ($instance['widget']['type']) {
    case 'zoetrope_uuid_field_text_widget':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 40,
        '#maxlength' => 40,
      );
      break;
  }
  $element['zoetrope_uuid_field'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function zoetrope_viewer_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'zoetrope_uuid_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Implements hook_field_is_empty().
 */
function zoetrope_viewer_field_is_empty($item, $field) {
  return empty($item['zoetrope_uuid_field']);
}

/**
 * Implements hook_field_formatter_info().
 */
function zoetrope_viewer_field_formatter_info() {
  $info = array(
    'zoetrope_engage_image' => array(
      'label' => t('Zoetrope Reel viewer'),
      'field types' => array('zoetrope_uuid_field', 'text'),
      'description' => t('Embeds the zoetrope viewer.'),
      'settings' => array(
        'inline_image' => FALSE,
        'force_mini' => FALSE,
        'image_style' => '',
      ),
    ),
    'zoetrope_image_gallery' => array(
      'label' => t('Image + Zoetrope Images'),
      'field types' => array('image'),
      'description' => t('Image formatter which includes zoetrope images.'),
      'settings' => array(
        'zoetrope_uuid_field_name' => '',
        'position' => 'first',
        'image_style' => '',
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function zoetrope_viewer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($instance['display'][$view_mode]['type']) {

    case 'zoetrope_engage_image':
      $element['inline_image'] = array(
        '#type' => t('checkbox'),
        '#title' => t('Inline Engage image'),
        '#description' => t('Inline images appear in the page content, whereas normal engage images open in a responsive lightbox overlay.'),
        '#default_value' => $settings['inline_image'],
      );

      $element['force_mini'] = array(
        '#type' => 'checkbox',
        '#title' => t('Force Mini (Non inline only)'),
        '#description' => t('Forces the viewer to display a mini zoetrope viewer, rather than the responsive one in the interest of bandwidth'),
        '#default_value' => $settings['force_mini'],
      );

      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;

    case 'zoetrope_image_gallery':

      $fields_info = field_info_instances($instance['entity_type'], $instance['bundle']);
      $options = array('' => 'None');
      foreach ($fields_info as $field_name => $field_instance) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'zoetrope_uuid_field') {
          $options[$field_name] = $field_instance['label'];
        }
      }

      $element['zoetrope_uuid_field_name'] = array(
        '#type' => 'select',
        '#title' => t('Zoetrope ID field to combine'),
        '#description' => t('The field on this entity to combine for display. You probably want to hide the zoetrope_uuid_field which you use here.'),
        '#default_value' => $settings['zoetrope_uuid_field_name'],
        '#options' => $options,
      );

      $element['position'] = array(
        '#type' => 'select',
        '#title' => t('Zoetrope positions'),
        '#description' => t('Where should the zoetrope images be placed'),
        '#default_value' => $settings['position'],
        '#options' => array(
          'start' => t('Start'),
          'end' => t('End'),
        ),
      );

      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;
  }
  return $element;

}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function zoetrope_viewer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  switch ($display['type']) {
    case 'zoetrope_engage_image':
      $summary[] = $settings['inline_image'] ? 'Inline (no overlay)' : 'Show in Overlay';
      $summary[] = $settings['force_mini'] ? 'Mini Viewer' : 'Responsive Viewer';
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }
      break;

    case 'zoetrope_image_gallery':
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }
      if (empty($settings['zoetrope_uuid_field_name'])) {
        $summary[] = t('Engage Image configured');
      }
      else {
        $summary[] = t('Using field `@name` at the @pos of list.',
          array('@name' => $settings['zoetrope_uuid_field_name'], '@pos' => $settings['position']));
      }
      break;
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function zoetrope_viewer_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {

  foreach ($entities as $id => $entity) {
    $instance = $instances[$id];
    $display = $displays[$id];
    // If it's a zoetrope_image_gallery display.
    if ($display['type'] == 'zoetrope_image_gallery' && !empty($display['settings']['zoetrope_uuid_field_name'])) {
      // Add the zoetrope engage images if we can.
      if (isset($entity->{$display['settings']['zoetrope_uuid_field_name']})) {
        $zoetrope_uuid_field = $entity->{$display['settings']['zoetrope_uuid_field_name']}[LANGUAGE_NONE];
        $e_items = &$items[$id];
        foreach ($zoetrope_uuid_field as $value) {
          if ($display['settings']['position'] == 'end') {
            array_push($e_items, $value);
          }
          else {
            array_unshift($e_items, $value);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function zoetrope_viewer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];
  $zoe_cdn = variable_get('zoetrope_viewer:cdn', ZOETROPE_VIEWER_CDN);
  drupal_add_js($zoe_cdn . '/v1/js/zoe-widget.min.js', array(
    'type' => 'external',
    'group' => JS_THEME,
    'weight' => 1000000,
    )
  );
  drupal_add_css($zoe_cdn . '/v1/css/style.css', 'external');

  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'zoetrope_engage_image':
        $element[$delta] = _zoetrope_viewer_engage_image_field_view($item, $settings, $instance['id']);
        break;

      case 'zoetrope_image_gallery':

        if (isset($item['zoetrope_uuid_field'])) {
          $element[$delta] = _zoetrope_viewer_engage_image_field_view($item, $settings);
        }
        else {
          $element[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => $item,
            '#image_style' => $display['settings']['image_style'],
            '#path' => '',
          );
        }
        break;

    }
  }
  return $element;
}

/**
 * Helper to make a renderable array.
 */
function _zoetrope_viewer_engage_image_field_view($item, $settings, $rel = FALSE) {
  $img_uuid = $item['zoetrope_uuid_field'];
  $site_uuid = variable_get('zoetrope_viewer:site_uuid', '');
  $preview_path = zoetrope_viewer_preview_image_url($img_uuid);
  $e = array(
    '#theme' => 'image',
    '#path' => $preview_path,
    '#attributes' => array(
      'data-zoe-image' => $img_uuid,
      'data-zoe-site' => $site_uuid,
      'data-zoe-rel' => $rel,
      'class' => array('zoe-engage-image'),
    ),
  );
  if (isset($settings['force_mini']) && $settings['force_mini']) {
    $e['#attributes']['class'][] = 'zoe-mini';
  }
  if (isset($settings['inline_image']) && $settings['inline_image']) {
    $e['#attributes']['data-zoe-inline'] = '';
  }
  if (isset($settings['trigger_size']) && intval($settings['trigger_size']) !== 0) {
    $e['#attributes']['width'] = $settings['trigger_size'];
    $e['#attributes']['height'] = $settings['trigger_size'];
  }
  if (!empty($settings['image_style'])) {
    $dimensions = array('width' => 500, 'height' => 500);
    image_style_transform_dimensions($settings['image_style'], $dimensions);
    $e['#attributes']['width'] = $dimensions['width'];
    $e['#attributes']['height'] = $dimensions['height'];
  }
  return $e;
}

/**
 * Implements hook_token_info_alter().
 */
function zoetrope_viewer_token_info_alter(&$info) {
  $fields = field_info_fields();
  // Attach field tokens to their respecitve entity tokens.
  foreach ($fields as $field_name => $field) {

    if ($field['type'] == 'zoetrope_uuid_field') {
      foreach (array_keys($field['bundles']) as $token_type) {
        $token_name = $field_name . '_preview_url';
        $info['tokens'][$token_type][$token_name] = array(
          'name' => t('@field Preview url', array('@field' => $field_name)),
          'description' => t('The url of the preview jpg for an engage image'),
          'module' => 'zoetrope_viewer',
        );
      }
    }
  }

}

/**
 * Implements hook_tokens().
 */
function zoetrope_viewer_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'entity' && !empty($data['entity_type']) && !empty($data['entity']) && !empty($data['token_type'])) {

    foreach ($tokens as $field_name_suffixed => $token) {

      if (isset($tokens[$field_name_suffixed]) && _token_module($data['token_type'], $field_name_suffixed) == 'zoetrope_viewer') {

        $field_name = str_replace('_preview_url', '', $field_name_suffixed);
        $entity = $data['entity'];
        $field_info = field_info_field($field_name);
        if ($field_info['type'] != 'zoetrope_uuid_field' || empty($entity->{$field_name})) {
          continue;
        }
        /*
         * TODO: How to deal with multiple deltas?
         */
        $url = zoetrope_viewer_preview_image_url($entity->{$field_name}[LANGUAGE_NONE][0]['zoetrope_uuid_field']);
        $replacements[$token] = $url;
      }
    }
  }

  return $replacements;
}

// Helper functions.
/**
 * Returns a preview image URL from the CDN.
 */
function _zoetrope_viewer_image_url($uuid, $size = 500, $position = 0) {
  $mode = !empty($_SERVER['HTTPS']) ? 'https:' : 'http:';
  $zoe_cdn = variable_get('zoetrope_viewer:cdn', ZOETROPE_VIEWER_CDN);
  if (!in_array($size, array(250, 500, 1000))) {
    watchdog('Zoetrope Viewer', 'Invalid image size `@size` selected for preview, should have been 250,500 or 1000.',
              array('@size' => $size), WATCHDOG_ERROR);
  }
  return $mode . $zoe_cdn . '/' . $uuid . '/' . $size . '/' . $position . '.jpg';
}

/**
 * Shortcut for `_zoetrope_viewer_image_url($uuid, 500, 0)`.
 */
function zoetrope_viewer_preview_image_url($uuid) {
  return _zoetrope_viewer_image_url($uuid);
}

/**
 * Shortcut for `_zoetrope_viewer_image_url($uuid, 1000, 0)`.
 */
function zoetrope_viewer_large_image_url($uuid) {
  return _zoetrope_viewer_image_url($uuid, 1000);
}
